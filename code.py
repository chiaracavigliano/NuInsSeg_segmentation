# -*- coding: utf-8 -*-
"""Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ed2wk7ikt6ceIp8fp0k6eScEAUxx9L0O
"""

from google.colab import drive
import json
import shutil
import os
import cv2
import zipfile
from glob import glob
import pandas as pd
import numpy as np
from skimage.io import imread
import matplotlib.pyplot as plt
import re
import os
from collections import defaultdict
from PIL import Image

# Commented out IPython magic to ensure Python compatibility.
drive.mount('/content/gdrive')
# %cd /content/gdrive/MyDrive/NuInsSeg/Code/NuInsSeg_segmentation

"""# Exploration of the dataset"""

working_dir = '/content/gdrive/MyDrive/NuInsSeg/Data'

# number of images in the entire dataset
img_path = "/content/gdrive/MyDrive/NuInsSeg/Data/*/tissue images/"
img_num = glob('{}*{}'.format(img_path, 'png'))
print('total number of images:', len(img_num))

# name of human and mouse organs
organ_names = [ name for name in os.listdir(working_dir) if os.path.isdir(os.path.join(working_dir, name)) ]
organ_names.sort()
print('human and mouse organ names:')
organ_names

"""# Dataset Class"""

class NuInsSeg:
  def __init__(self, root_dir, masks):
    '''Inputs:
       - root_dir = directory with all data
       - masks = list of the names of the mask that you want to use'''

    self.root_dir = root_dir
    self.masks = masks
    self.dict_image = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))  ##create a dictionary of dictionaries (nidification) to obtain in a fast way the images
    self._load_data()


  def _load_data(self):
    sub_names = ['tissue images']
    sub_names.extend(self.masks)
    tissues = os.listdir(self.root_dir)
    codes = []
    images = []
    for tissue in os.listdir(self.root_dir):
        tissue_path = os.path.join(self.root_dir, tissue)
        if os.path.isdir(tissue_path):
            for sub in sub_names:
                sub_path = os.path.join(tissue_path, sub)
                if os.path.isdir(sub_path):
                    for name_img in os.listdir(sub_path):
                      img_path = sub_path + '/' + name_img
                      image = Image.open(img_path)
                      image = np.array(image)
                    #save the image code
                      pattern = r'(\d+)(?=\.\w+$)'
                      match = re.search(pattern, name_img)
                      if match:
                        code = match.group(0)
                      else:
                        code = None

                      self.dict_image[tissue][sub][code].append(image)
                      self.dict_image[tissue][sub][code] = np.squeeze(self.dict_image[tissue][sub][code], axis = 0)

  ###function to get the items from the dictionary of the dataset
  def __getitem__(self, key):
        return self.dict_image[key]
  ###function to assign values in the dictionary of the dataset
  def __setitem__(self, key, value):
        self.dict_image[key] = value

#declare the masks that you want to use
masks = ['mask binary']
#creating the dictionary of the dataset
dataset = NuInsSeg(working_dir, masks)

plt.imshow(dataset['human brain']['tissue images']['4'])
plt.show()
plt.imshow(dataset['human brain']['mask binary']['4'], cmap = 'gray')
plt.show()